// ============================================================================
// <one line to give the file's name and a brief idea of what it does.>
//  Copyright (C) <yyyy> <Author Name> <author@mail.com>
//
// This file is part of <program_name>.
// 
// <program_name> is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software  Foundation, either version 3 of the License, or (at your option)
// any later version.
// 
// <program_name> is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
// more details.
//
// You should have received a copy of the GNU General Public License along with
// <program_name>. If not, see <https://www.gnu.org/licenses/>.
//
// ============================================================================


// ============================================================================
//
// <Put documentation here>
//
// <yyyy>-<mm>-<dd> <Author Name> <author@mail.com>
//
// * <programfilename>.cpp: created.
//
// ============================================================================


// ============================================================================
//
// References (this section should be deleted in the release version)
//
// * For command line arguments parsing using clipp consult documentation and
//   examples at <https://github.com/muellan/clipp>.
//
// ============================================================================


// ============================================================================
// Preprocessor directives section
// ============================================================================


// ============================================================================
// Headers include section
// ============================================================================

// Related header

// "C" system headers

// Standard Library headers
#include <cstdlib>      // required by EXIT_SUCCESS, EXIT_FAILURE
#include <filesystem>   // Used for testing directory and file status
#include <iostream>     // required by cin, cout, ...
#include <string>       // required by std::string

// External libraries headers
#include <clipp.hpp>    // command line arguments parsing


// ============================================================================
// Global constants section
// ============================================================================

static constexpr auto kAppName       = "cli_app";
static constexpr auto kVersionString = "0.1";
static constexpr auto kYearString    = "yyyy";
static constexpr auto kAuthorName    = "Ljubomir Kurij";
static constexpr auto kAuthorEmail   = "ljubomir_kurij@protonmail.com";
static constexpr auto kAppDoc        = "\
Framework for developing command line applications using \'clipp\' command\n\
line argument parsing library.\n\n\
Mandatory arguments to long options are mandatory for short options too.\n";
static constexpr auto kLicense       = "\
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\n\
This is free software: you are free to change and redistribute it.\n\
There is NO WARRANTY, to the extent permitted by law.\n";


// ============================================================================
// Global variables section
// ============================================================================


// ============================================================================
// Utility function prototypes
// ============================================================================

// ----------------------------------------------------------------------------
// 'printShortHelp' function
// ----------------------------------------------------------------------------
//
// Description:
// This function prints a short help message to the standard output. The
// message is intended to be used when the user passes wrong command line
// options.
//
// Parameters:
//   exec_name: The name of the executable file running the program.
//
// Returns:
// This function does not return a value.
//
// Exceptions:
// This function does not throw exceptions.
//
// ----------------------------------------------------------------------------
void printShortHelp(const char * = kAppName) noexcept;

// ----------------------------------------------------------------------------
// 'printUsage' function
// ----------------------------------------------------------------------------
//
// Description:
// This function prints the usage message to the standard output. The usage
// message is generated by the 'clipp' library and it is based on the command
// line options defined in the 'parser_config' variable.
//
// Parameters:
//   group: The 'clipp' group object that holds the command line options.
//   prefix: The name of the executable file running the program.
//   fmt: The 'clipp' formatting object that defines the formatting of the
//        usage message.
//
// Returns:
// This function does not return a value.
//
// Exceptions:
// See the 'clipp' library documentation for the exceptions that can be thrown
// by the 'usage_lines' function.
//
// ----------------------------------------------------------------------------
void printUsage(
  const clipp::group &,
  const char * = kAppName,
  const clipp::doc_formatting & = clipp::doc_formatting{}
  );

// ----------------------------------------------------------------------------
// 'printVersionInfo' function
// ----------------------------------------------------------------------------
//
// Description:
// This function prints the version information to the standard output. The
// version information includes the name of the program, the version string,
// the year of the release, the name of the author and the license information.
//
// Parameters:
//   exec_name: The name of the executable file running the program.
//   app_version: The version string of the program.
//   release_year: The year of the release.
//   author_name: The name of the author.
//   license: The license information.
//
// Returns:
// This function does not return a value.
//
// Exceptions:
// This function does not throw exceptions.
//
// ----------------------------------------------------------------------------
void printVersionInfo(
  const char * = kAppName,
  const char * = kVersionString,
  const char * = kYearString,
  const char * = kAuthorName,
  const char * = kLicense
  ) noexcept;

// ----------------------------------------------------------------------------
// 'showHelp' function
// ----------------------------------------------------------------------------
//
// Description:
// This function prints the help message to the standard output. The help
// message is generated by the 'clipp' library and it is based on the command
// line options defined in the 'parser_config' variable.
//
// Parameters:
//   group: The 'clipp' group object that holds the command line options.
//   exec_name: The name of the executable file running the program.
//   doc: The documentation string that describes the program.
//   author_email: The email address of the author.
//
// Returns:
// This function does not return a value.
//
// Exceptions:
// See the 'clipp' library documentation for the exceptions that can be thrown
// by the 'clipp::doc_formatting', 'clipp::usage_lines' and
// 'clipp::documentation' functions.
//
// ----------------------------------------------------------------------------
void showHelp(
  const clipp::group &,
  const char * = kAppName,
  const char * = kAppDoc,
  const char * = kAuthorEmail
  );


// ============================================================================
// Main Function Section
// ============================================================================

int main(int argc, char *argv[])
{
  namespace fs = std::filesystem;  // Define a shorter alias for filesystem

  // Determine the exec name under wich program is beeing executed
  std::string exec_name = fs::path(argv[0]).filename().string();

  // Here we define the structure for holding the passed command line otions.
  // The structure is also used to define the command line options and their
  // default values.
  struct CLIOptions {
    bool show_help;
    bool print_usage;
    bool show_version;
    std::vector<std::string> unsupported;
    };

  // Define the default values for the command line options
  CLIOptions user_options {
    false,  // show_help
    false,  // print_usage
    false,  // show_version
    {}      // unsupported options aggregator
    };

  // Option filters definitions
  auto istarget = clipp::match::prefix_not("-");  // Filter out strings that
                                                  // start with '-' (options)

  // Set command line options
  auto parser_config = (
    // Define the command line options and their default values.
    // - Must have more than one option.
    // - The order of the options is important.
    // - The order of the options in the group is important.
    // - Take care not to omitt value filter when parsing file and directory
    //   names. Otherwise, the parser will treat options as values.
    // - Define positional arguments first
    // - Define positional srguments as optional to enforce the priority of
    //   help, usage and version switches. Then enforce the required
    //   positional arguments by checking if their values are set.
    (
      clipp::option("-h", "--help").set(user_options.show_help)
        .doc("show this help message and exit"),
      clipp::option("--usage").set(user_options.print_usage)
        .doc("give a short usage message"),
      clipp::option("-V", "--version").set(user_options.show_version)
        .doc("print program version")
    ).doc("general options:"),
    clipp::any_other(user_options.unsupported)
  );

  // Execute the main code inside a try block to catch any exceptions and
  // to ensure that all of the code exits at exactly the same point
  try {
    // Parse command line options
    auto result = clipp::parse(argc, argv, parser_config);

    // Check if the unsupported options were passed
    if (!user_options.unsupported.empty()) {
      std::cerr << exec_name << ": Unsupported options: ";
      for (const auto& opt : user_options.unsupported) {
        std::cerr << opt << " ";
      }
      std::cerr << "\n";
      printShortHelp(exec_name.c_str());
      throw EXIT_FAILURE;
    }

    // Check if the help switch was triggered. We give help switch the
    // highest priority, so if it is triggered we don't need to check
    // anything else.
    if (user_options.show_help) {
      showHelp(parser_config, exec_name.c_str(), kAppDoc, kAuthorEmail);
      throw EXIT_SUCCESS;
    }

    // Check if the usage switch was triggered. Usge switch has the second
    // highest priority, so if it is triggered we don't need to check
    // anything else.
    if (user_options.print_usage) {
      auto fmt = clipp::doc_formatting {}
        .first_column(0)
        .last_column(79);
      printUsage(parser_config, exec_name.c_str(), fmt);
      throw EXIT_SUCCESS;
    }

    // Check if the version switch was triggered. Version switch has the
    // third highest priority.
    if (user_options.show_version) {
      printVersionInfo(
        exec_name.c_str(),
        kVersionString,
        kYearString,
        kAuthorName,
        kLicense
        );
      throw EXIT_SUCCESS;
    }

    // No high priority switch was triggered. Proceed with the main code.

    // Main code goes here ----------------------------------------------------
    std::cout << "Hello, World!" << "\n";

    // Return success
    throw EXIT_SUCCESS;

  } catch (int result) {
    // Return the result of the main code
    return result;

  } catch (...) {
    // We have an unhandled exception. Print error message and exit
    try {
      std::rethrow_exception(std::current_exception());
    } catch (const std::exception& e) {
      std::cerr << exec_name << ": Unhandled exception: "
        << e.what()
        << "\n";
    }

    // Return an error code
    return EXIT_FAILURE;
  }

  // The code should never reach this point. If it does, print an error
  // message and exit
  std::cerr << exec_name << ": Unhandled program exit!" << "\n";

  return EXIT_FAILURE;
}


// ============================================================================
// Function definitions
// ============================================================================

inline void printShortHelp(const char *exec_name) noexcept{
  std::cout << "Try '" << exec_name << " --help' for more information.\n";
}

inline void printUsage(
    const clipp::group          &group,
    const char                  *prefix,
    const clipp::doc_formatting &fmt
    ) {
  std::cout
    << clipp::usage_lines(group, std::string {prefix}, fmt)
    << "\n";
}

void printVersionInfo(
    const char *exec_name,
    const char *app_version,
    const char *release_year,
    const char *author_name,
    const char *license
    ) noexcept {
  std::cout
    << exec_name << " "
    << app_version << " Copyright (C) "
    << release_year << " "
    << author_name << "\n"
    << license;
}

void showHelp(
    const clipp::group &group,
    const char         *exec_name,
    const char         *doc,
    const char         *author_email
    ) {
  auto fmt = clipp::doc_formatting{}.first_column(0).last_column(79);
  clipp::man_page man;

  man.prepend_section("USAGE",
    clipp::usage_lines(group, std::string {exec_name}, fmt).str());
  man.append_section("", std::string {doc});
  man.append_section("", clipp::documentation(group, fmt).str());
  man.append_section("",
    "Report bugs to <" + std::string {author_email} + ">.");

  std::cout << man;
}
